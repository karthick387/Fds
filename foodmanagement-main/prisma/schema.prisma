// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") 
}

enum UserType {
  DONOR
  RECEIVER
  DISTRIBUTOR
}

enum FoodRequestStatus {
  REQUESTED
  ACCEPTED
}

enum DistributorStatus {
  PENDING
  ACCEPTED
  READY
  PICKEDUP
  DISTRIBUTED
  DECLINED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                   String        @id @default(cuid())
  name                 String?
  email                String?       @unique
  emailVerified        DateTime?
  image                String?
  userType             UserType?
  contactNo            String?
  address              String?
  orgName              String?
  todayDate            DateTime?     
  startTime            String?     
  endTime              String?
  accounts             Account[]
  sessions             Session[]
  food                 Food[]        @relation("DonorAsUser")
  receiverFoodRequest  FoodRequest[] @relation("ReceiverAsUser")
  requestedDistributor FoodRequest[] @relation("DistributorAsUser")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Food {
  foodId           Int           @id @default(autoincrement())
  foodName         String?
  peopleToBeServed String?
  venue            String?
  description      String?
  contactNo        String?
  userId           String
  user             User          @relation("DonorAsUser", fields: [userId], references: [id])
  FoodRequest      FoodRequest[]
}

model FoodRequest {
  foodReqId              Int                @id @default(autoincrement())
  foodRequestStatus      FoodRequestStatus?
  distributorStatus      DistributorStatus?
  foodId                 Int
  food                   Food               @relation(fields: [foodId], references: [foodId])
  requestingUserId       String
  requestingId           User               @relation("ReceiverAsUser", fields: [requestingUserId], references: [id])
  requestedDistributorId String
  distributorId          User               @relation("DistributorAsUser", fields: [requestedDistributorId], references: [id])
}
